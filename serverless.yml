service: ques

custom:
  secrets: ${file(secrets.json)}

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 10
  stage: ${self:custom.secrets.NODE_ENV}
  environment: 
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    DB_NAME: ${self:custom.secrets.DB_NAME}
    DB_USER: ${self:custom.secrets.DB_USER}
    DB_PASSWORD: ${self:custom.secrets.DB_PASSWORD}
    DB_HOST: ${self:custom.secrets.DB_HOST}
    DB_PORT: ${self:custom.secrets.DB_PORT}
  vpc:
    securityGroupIds:
      - ${self:custom.secrets.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:custom.secrets.SUBNET1_ID}
      - ${self:custom.secrets.SUBNET2_ID}
      - ${self:custom.secrets.SUBNET3_ID}
      - ${self:custom.secrets.SUBNET4_ID}

functions:
  home:
    handler: handler.home
    events:
      - http:
          path: /
          method: get
          cors: true
  healthCheck:
    handler: handler.healthCheck
    events:
      - http:
          path: /health
          method: get
          cors: true
  create:
    handler: handler.create
    events:
      - http:
          path: ques
          method: post
          cors: true
  getOne:
    handler: handler.getOne
    events:
      - http:
          path: ques/{id}
          method: get
          cors: true
  getAll:
    handler: handler.getAll
    events:
     - http:
         path: ques
         method: get
         cors: true
  update:
    handler: handler.update
    events:
     - http:
         path: ques/{id}
         method: put
         cors: true
  destroy:
    handler: handler.destroy
    events:
     - http:
         path: ques/{id}
         method: delete
         cors: true
  exam:
    handler: handler.exam
    events:
      - http:
          path: exam/{id}
          method: get
          cors: true
plugins:
  - serverless-offline
